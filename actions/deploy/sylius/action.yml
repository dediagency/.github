name: 'Deploy Sylius'
description: 'Reusable deployment action for Sylius applications'
author: 'Dedi Agency'

defaults:
  run:
    shell: bash

inputs:
  ssh_host:
    description: 'SSH host for deployment'
    required: true
  ssh_username:
    description: 'SSH username'
    required: true
  ssh_private_key:
    description: 'SSH private key'
    required: true
  ssh_port:
    description: 'SSH port'
    required: false
    default: '22'

  environment:
    description: 'Environment name (recette, preproduction, production)'
    required: true
  branch:
    description: 'Git branch to deploy'
    required: true
  deploy_path:
    description: 'Deployment path on server (auto-generated if not provided: $HOME/{environment}-{ssh_username})'
    required: false
  site_url:
    description: 'Site URL for the environment (auto-generated if not provided: https://{environment}-{ssh_username}.dediagency.dev)'
    required: false
  app_env:
    description: 'Application environment (auto-set based on environment)'
    required: false

  php_version:
    description: 'PHP version to use'
    required: false
    default: '8.3'
  php_binary:
    description: 'PHP binary to use'
    required: false
    default: 'php8.3'
  composer_path:
    description: 'Path to composer binary'
    required: false
    default: '/usr/bin/composer'
  node_version:
    description: 'Node.js version requirement'
    required: false
    default: '18'
  node_binary:
    description: 'Node binary to use'
    required: false
    default: 'node'
  npm_binary:
    description: 'NPM binary to use'
    required: false
    default: 'npm'

  composer_install_args:
    description: 'Additional arguments for composer install'
    required: false
    default: '--no-dev --optimize-autoloader --no-interaction --no-scripts'
  npm_install_command:
    description: 'NPM install command'
    required: false
  build_command:
    description: 'Build command for assets'
    required: false

  db_operations:
    description: 'Database operations to run (json array)'
    required: false
  shared_dirs:
    description: 'Shared directories to symlink (json array)'
    required: false
  shared_files:
    description: 'Shared files to symlink (json array)'
    required: false

  cache_commands:
    description: 'Cache commands to run (json array)'
    required: false
  asset_commands:
    description: 'Asset commands to run (json array)'
    required: false

  permission_method:
    description: 'Permission method to use (chmod or setfacl)'
    required: false
    default: 'chmod'
  file_permissions:
    description: 'File permissions to set'
    required: false
    default: '755'
  var_permissions:
    description: 'Var directory permissions to set'
    required: false
    default: '775'
  setfacl_user:
    description: 'User for setfacl permissions (required if using setfacl)'
    required: false
    default: ''
  setfacl_group:
    description: 'Group for setfacl permissions (required if using setfacl)'
    required: false
    default: ''

  run_post_deploy_cmd:
    description: 'Run composer post-deploy-cmd scripts'
    required: false
    default: 'true'
  post_deploy_commands:
    description: 'Additional post-deploy commands to run (json array)'
    required: false
    default: '[]'

  reload_services:
    description: 'Services to reload after deployment (json array)'
    required: false
    default: '["php8.3-fpm"]'

  repository:
    description: 'GitHub repository (owner/repo)'
    required: false
    default: ${{ github.repository }}

  dry_run:
    description: 'Enable dry-run mode (simulation only)'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Prepare deploy script
      shell: bash
      run: |
        rm -rf .github-deploy
        mkdir -p .github-deploy
        cp "${GITHUB_ACTION_PATH}/deploy.sh" .github-deploy/deploy.sh
        cp -R "${GITHUB_ACTION_PATH}/lib" .github-deploy/lib
        cp -R "${GITHUB_ACTION_PATH}/../shared" .github-deploy/shared

    - name: Check deployment mutex
      uses: appleboy/ssh-action@v1.0.3
      env:
        DEPLOY_PLATFORM: sylius
        DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script_stop: true
        envs: DEPLOY_PLATFORM,DEPLOY_ENVIRONMENT
        script: |
          MUTEX_FILE="$HOME/.deploy/deploy.lock"

          echo "🔒 Checking deployment mutex..."

          if [ -f "$MUTEX_FILE" ]; then
            LOCK_INFO=$(cat "$MUTEX_FILE" 2>/dev/null || echo "unknown")
            LOCK_TIME=$(stat -c %Y "$MUTEX_FILE" 2>/dev/null || echo "0")
            LOCK_AGE=$(($(date +%s) - LOCK_TIME))

            # Si le lock est très ancien (plus de 1h), on le considère comme stale
            if [ $LOCK_AGE -gt 3600 ]; then
              echo "⚠️  Stale deployment lock detected (${LOCK_AGE}s old), removing it"
              rm -f "$MUTEX_FILE"
            else
              echo "⛔ Deployment already in progress: $LOCK_INFO"
              echo "Lock file: $MUTEX_FILE (created ${LOCK_AGE}s ago)"
              exit 1
            fi
          fi

          # Créer le mutex
          mkdir -p "$HOME/.deploy"
          echo "Platform: ${DEPLOY_PLATFORM} | Environment: ${DEPLOY_ENVIRONMENT} | Started: $(date '+%Y-%m-%d %H:%M:%S') | PID: $$" > "$MUTEX_FILE"
          echo "✅ Deployment mutex acquired"

    - name: Copy deployment script to server
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        source: ".github-deploy/*"
        target: "~/.deploy/tmp/"
        strip_components: 1

    - name: Deploy to ${{ inputs.environment }}
      uses: appleboy/ssh-action@v1.0.3
      env:
        DEPLOY_PLATFORM: sylius
        DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
        DEPLOY_BRANCH: ${{ inputs.branch }}
        DEPLOY_SSH_USERNAME: ${{ inputs.ssh_username }}
        DEPLOY_PHP_VERSION: ${{ inputs.php_version }}
        DEPLOY_PHP_BINARY: ${{ inputs.php_binary }}
        DEPLOY_COMPOSER_PATH: ${{ inputs.composer_path }}
        DEPLOY_NODE_BINARY: ${{ inputs.node_binary }}
        DEPLOY_NPM_BINARY: ${{ inputs.npm_binary }}
        DEPLOY_REPOSITORY: ${{ inputs.repository }}
        DEPLOY_PERMISSION_METHOD: ${{ inputs.permission_method }}
        DEPLOY_FILE_PERMISSIONS: ${{ inputs.file_permissions }}
        DEPLOY_VAR_PERMISSIONS: ${{ inputs.var_permissions }}
        DEPLOY_SETFACL_USER: ${{ inputs.setfacl_user }}
        DEPLOY_SETFACL_GROUP: ${{ inputs.setfacl_group }}
        DEPLOY_RUN_POST_DEPLOY_CMD: ${{ inputs.run_post_deploy_cmd }}
        DEPLOY_DEPLOY_PATH: ${{ inputs.deploy_path }}
        DEPLOY_SITE_URL: ${{ inputs.site_url }}
        DEPLOY_APP_ENV: ${{ inputs.app_env }}
        DEPLOY_DB_OPERATIONS: ${{ inputs.db_operations }}
        DEPLOY_CACHE_COMMANDS: ${{ inputs.cache_commands }}
        DEPLOY_ASSET_COMMANDS: ${{ inputs.asset_commands }}
        DEPLOY_SHARED_DIRS: ${{ inputs.shared_dirs }}
        DEPLOY_SHARED_FILES: ${{ inputs.shared_files }}
        DEPLOY_RELOAD_SERVICES: ${{ inputs.reload_services }}
        DEPLOY_POST_DEPLOY_COMMANDS: ${{ inputs.post_deploy_commands }}
        DEPLOY_NPM_INSTALL_COMMAND: ${{ inputs.npm_install_command }}
        DEPLOY_BUILD_COMMAND: ${{ inputs.build_command }}
        DEPLOY_COMPOSER_INSTALL_ARGS: ${{ inputs.composer_install_args }}
        DEPLOY_DRY_RUN: ${{ inputs.dry_run }}
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        port: ${{ inputs.ssh_port }}
        script_stop: true
        envs: DEPLOY_PLATFORM,DEPLOY_ENVIRONMENT,DEPLOY_BRANCH,DEPLOY_SSH_USERNAME,DEPLOY_PHP_VERSION,DEPLOY_PHP_BINARY,DEPLOY_COMPOSER_PATH,DEPLOY_NODE_BINARY,DEPLOY_NPM_BINARY,DEPLOY_REPOSITORY,DEPLOY_PERMISSION_METHOD,DEPLOY_FILE_PERMISSIONS,DEPLOY_VAR_PERMISSIONS,DEPLOY_SETFACL_USER,DEPLOY_SETFACL_GROUP,DEPLOY_RUN_POST_DEPLOY_CMD,DEPLOY_DEPLOY_PATH,DEPLOY_SITE_URL,DEPLOY_APP_ENV,DEPLOY_DB_OPERATIONS,DEPLOY_CACHE_COMMANDS,DEPLOY_ASSET_COMMANDS,DEPLOY_SHARED_DIRS,DEPLOY_SHARED_FILES,DEPLOY_RELOAD_SERVICES,DEPLOY_POST_DEPLOY_COMMANDS,DEPLOY_NPM_INSTALL_COMMAND,DEPLOY_BUILD_COMMAND,DEPLOY_COMPOSER_INSTALL_ARGS,DEPLOY_DRY_RUN
        script: |
          DEPLOY_ROOT="$HOME/.deploy/tmp"
          DEPLOY_SCRIPT_PATH="$DEPLOY_ROOT/deploy.sh"
          chmod +x "$DEPLOY_SCRIPT_PATH"
          "$DEPLOY_SCRIPT_PATH"
          rm -f "$DEPLOY_SCRIPT_PATH"
          rm -rf "$DEPLOY_ROOT/lib" "$DEPLOY_ROOT/shared"
